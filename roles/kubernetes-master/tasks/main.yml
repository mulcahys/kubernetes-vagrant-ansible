---

# Here we initialise the cluster with Kubeadm. We add the token manually so that we
# know its value when we initialise our nodes. We add --api-advertise-addresses manually
# because by default Kubeadm would choose the nat IP we get from Virtualbox, which is not good.
- name:    Initialise Kubernetes Cluster
  become:  true
  shell:   kubeadm init --token="{{ kubeadm_token }}" --apiserver-advertise-address="{{ kubernetes_master_ip }}" --apiserver-bind-port="{{ kubernetes_master_port }}"

#   mkdir -p $HOME/.kube
#   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#   sudo chown $(id -u):$(id -g) $HOME/.kube/config
#   TODO: clean this up
- name: setup kubeconfig (for root)
  become:  true
  shell: mkdir -p $HOME/.kube && cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && chown $(id -u):$(id -g) $HOME/.kube/config

- name: setup kubeconfig (for vagrant)
  become:  true
  shell: mkdir -p /home/vagrant/.kube && cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config && chown vagrant:vagrant /home/vagrant/.kube/config

# We install JQ for the next task
- name:    Install JQ
  become:  true
  apt:
    name:  jq
    state: present

# The following is a workaround, explained in more details here :
# https://github.com/kubernetes/kubernetes/issues/34101
# We need to add 'userspace' as a proxy mode for kubeproxy, otherwise
# the Kubernetes nodes can't reach all of the services (kube-dns)
#- name:    Add --proxy-mode=userspace to to kube-proxy component
#  become:  true
#  shell: >
#    kubectl -n kube-system get ds -l 'component=kube-proxy' -o json \
#      | jq '.items[0].spec.template.spec.containers[0].command |= .+ ["--proxy-mode=userspace"]' \
#      |   kubectl apply -f - && kubectl -n kube-system delete pods -l 'component=kube-proxy'

# Finally we install Weave Network for Kubernetes 
- name:    Install Weave
  become:  true
  shell:   kubectl apply -f https://git.io/weave-kube
